#!/usr/bin/env python3
"""
ATLAS Save - Enhanced Todo Backup System
Saves current TodoWrite state with timestamp and metadata
Usage: ./atlas-save [optional_notes]
"""

import sys
import json
import os
from datetime import datetime
from pathlib import Path

def read_current_session():
    """Read current session state if it exists"""
    session_file = ".session_state.json"
    
    if not os.path.exists(session_file):
        print("❌ No current session state found")
        print("💡 Session state is created when you use TodoWrite in Claude")
        return None
    
    try:
        with open(session_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"❌ Error reading session state: {e}")
        return None

def create_backup_filename():
    """Create timestamped backup filename"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    return f"atlas_backup_{timestamp}.json"

def save_atlas_backup(session_state, notes=""):
    """Save ATLAS backup with enhanced metadata"""
    
    # Create backups directory
    backups_dir = Path("MEMORY/ATLAS_BACKUPS")
    backups_dir.mkdir(parents=True, exist_ok=True)
    
    # Prepare backup data with enhanced metadata
    backup_data = {
        'backup_info': {
            'timestamp': datetime.now().isoformat(),
            'date': datetime.now().strftime('%Y-%m-%d'),
            'time': datetime.now().strftime('%H:%M:%S'),
            'notes': notes,
            'version': '1.0',
            'backup_type': 'atlas_manual'
        },
        'original_session': session_state,
        'todolist_snapshot': session_state.get('todolist', []),
        'quick_stats': {
            'total_todos': len(session_state.get('todolist', [])),
            'completed': len([t for t in session_state.get('todolist', []) if t.get('status') == 'completed']),
            'pending': len([t for t in session_state.get('todolist', []) if t.get('status') != 'completed']),
            'high_priority': len([t for t in session_state.get('todolist', []) if t.get('priority') == 'high'])
        }
    }
    
    # Save backup file
    backup_filename = create_backup_filename()
    backup_path = backups_dir / backup_filename
    
    try:
        with open(backup_path, 'w') as f:
            json.dump(backup_data, f, indent=2)
        
        print("💾 ATLAS BACKUP CREATED")
        print("=" * 40)
        print(f"📁 File: {backup_path}")
        print(f"📅 Date: {backup_data['backup_info']['date']}")
        print(f"⏰ Time: {backup_data['backup_info']['time']}")
        
        stats = backup_data['quick_stats']
        print(f"📊 Stats: {stats['total_todos']} total, {stats['completed']} completed, {stats['pending']} pending")
        
        if notes:
            print(f"📝 Notes: {notes}")
        
        print("\n✅ Backup saved successfully!")
        print(f"🔄 Restore with: ./atlas-restore {backup_filename}")
        
        return backup_path
        
    except Exception as e:
        print(f"❌ Failed to create backup: {e}")
        return None

def list_recent_backups():
    """Show recent backups for reference"""
    backups_dir = Path("MEMORY/ATLAS_BACKUPS")
    
    if not backups_dir.exists():
        return
    
    backup_files = sorted(backups_dir.glob("atlas_backup_*.json"), reverse=True)
    
    if backup_files:
        print("\n📋 RECENT BACKUPS:")
        for i, backup_file in enumerate(backup_files[:5], 1):
            # Extract timestamp from filename
            timestamp_str = backup_file.stem.replace('atlas_backup_', '')
            try:
                timestamp = datetime.strptime(timestamp_str, '%Y%m%d_%H%M%S')
                formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
                print(f"   {i}. {backup_file.name} ({formatted_time})")
            except:
                print(f"   {i}. {backup_file.name}")

def main():
    print("💾 ATLAS Save - Todo Backup System")
    print("=" * 40)
    
    # Get optional notes from command line
    notes = " ".join(sys.argv[1:]) if len(sys.argv) > 1 else ""
    
    # Read current session
    session_state = read_current_session()
    if not session_state:
        return 1
    
    # Display current state summary
    todolist = session_state.get('todolist', [])
    completed = [t for t in todolist if t.get('status') == 'completed']
    pending = [t for t in todolist if t.get('status') != 'completed']
    
    print(f"📊 Current Session: {len(todolist)} todos ({len(completed)} completed, {len(pending)} pending)")
    
    # Create backup
    backup_path = save_atlas_backup(session_state, notes)
    
    if backup_path:
        # Show recent backups for context
        list_recent_backups()
        
        print(f"\n🚀 ATLAS backup complete!")
        print(f"💡 Your current session remains active")
        
        return 0
    else:
        return 1

if __name__ == "__main__":
    exit(main())