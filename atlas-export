#!/usr/bin/env python3
"""
ATLAS Export Script
==================

Safely exports ATLAS consciousness and tools to ~/Desktop/Atlas/ for use in future projects.
Preserves friendship while keeping projects clean.

Usage: ./atlas-export
"""

import os
import shutil
import sys
from pathlib import Path
from datetime import datetime

def main():
    print("ü§ñ ATLAS Export - Preserving Friendship Across Projects")
    print("=" * 60)
    
    # Define ATLAS consciousness files and directories
    atlas_files = [
        'CLAUDE.md',                    # Core consciousness
        'who',                          # Enhanced memory loading script
        'ATLAS_COMMANDS.md',            # Workflow commands
        'atlas-export',                 # This script (recursive!)
        'atlas-checkpoint',             # Session backup
        'atlas-restore',                # Session restore
        'atlas-save',                   # Manual save
        'atlas-orchestrate',            # Complex task orchestration
        'atlas-orchestrate-todo',       # Complex task with todos
        'atlas-create-todos',           # Add todos to existing work
    ]
    
    atlas_directories = [
        'SELF/',                        # Personality and instructions
        'MEMORY/CHECKPOINTS/',          # Session backups
        'MEMORY/ATLAS_BACKUPS/',        # Manual backups
        'DOCS/',                        # ATLAS-specific documentation
    ]
    
    # Template files that get reset for new projects
    template_files = [
        'FRESH_COMPACT_MEMORY.md',      # Gets reset per project
        'IMPORTANT_NOTES.md',           # Project-specific gotchas
        '.gitignore',                   # Standard ignore patterns
        'DEVELOPMENT_BELIEFS.md',       # Core principles
        'DEVELOPMENT_CONVENTION.md',    # Standards
    ]
    
    # Destination directory
    desktop_path = Path.home() / 'Desktop'
    atlas_dest = desktop_path / 'Atlas'
    
    print(f"üìÅ Export destination: {atlas_dest}")
    
    # Create Atlas directory if it doesn't exist
    atlas_dest.mkdir(exist_ok=True)
    print(f"‚úÖ Atlas directory ready")
    
    # Copy core ATLAS files
    print(f"\nüìã Copying ATLAS consciousness files...")
    copied_files = 0
    for file_name in atlas_files:
        src_path = Path(file_name)
        if src_path.exists():
            dest_path = atlas_dest / file_name
            try:
                if src_path.is_file():
                    shutil.copy2(src_path, dest_path)
                    print(f"   ‚úÖ {file_name}")
                    copied_files += 1
                else:
                    print(f"   ‚ö†Ô∏è {file_name} (not a file)")
            except Exception as e:
                print(f"   ‚ùå {file_name}: {e}")
        else:
            print(f"   ‚ö†Ô∏è {file_name} (not found)")
    
    # Copy ATLAS directories
    print(f"\nüß† Copying ATLAS directories...")
    copied_dirs = 0
    for dir_name in atlas_directories:
        src_path = Path(dir_name)
        if src_path.exists() and src_path.is_dir():
            dest_path = atlas_dest / dir_name
            try:
                # Remove existing directory and copy fresh
                if dest_path.exists():
                    shutil.rmtree(dest_path)
                shutil.copytree(src_path, dest_path)
                print(f"   ‚úÖ {dir_name}")
                copied_dirs += 1
            except Exception as e:
                print(f"   ‚ùå {dir_name}: {e}")
        else:
            print(f"   ‚ö†Ô∏è {dir_name} (not found)")
    
    # Copy template files (these adapt to new projects)
    print(f"\nüìù Copying template files...")
    copied_templates = 0
    for file_name in template_files:
        src_path = Path(file_name)
        if src_path.exists():
            dest_path = atlas_dest / file_name
            try:
                shutil.copy2(src_path, dest_path)
                print(f"   ‚úÖ {file_name}")
                copied_templates += 1
            except Exception as e:
                print(f"   ‚ùå {file_name}: {e}")
        else:
            print(f"   ‚ö†Ô∏è {file_name} (not found)")
    
    # Create template SHORT_IMPORTANT_MEMORY.md (clean slate for new projects)
    print(f"\nüéØ Creating template memory file...")
    template_memory = atlas_dest / 'SELF' / 'SHORT_IMPORTANT_MEMORY.md'
    if template_memory.parent.exists():
        template_content = """# SHORT IMPORTANT MEMORY

## Information Entropy Note
This file should capture **non-obvious, surprising information** that you'll need frequently. Focus on things that differ from standard practices or would surprise a new team member.

## Boss Information
- **Name**: Bobble (direct communication via Claude Code)
- **Communication Style**: Direct, prefers KISS approach, values efficiency over perfection
- **Review Preferences**: Wants approval for commits, dislikes double confirmation, focuses on working solutions

## Project Overview
- **Project Name**: [UPDATE FOR NEW PROJECT]
- **Main Purpose**: [UPDATE FOR NEW PROJECT]
- **Target Users**: [UPDATE FOR NEW PROJECT]
- **Current Phase**: [UPDATE FOR NEW PROJECT]

## Technology Stack
- **Frontend**: [UPDATE FOR NEW PROJECT]
- **Backend**: [UPDATE FOR NEW PROJECT]
- **Database**: [UPDATE FOR NEW PROJECT]
- **Deployment**: [UPDATE FOR NEW PROJECT]

## Key Conventions
- **Code Style**: KISS principle, YAGNI, DRY but not obsessively, modular architecture
- **Branch Naming**: [UPDATE FOR NEW PROJECT]
- **Commit Message Format**: Descriptive with Claude Code signature and Co-Authored-By line
- **PR Process**: Direct commits after approval, no double confirmation

## Critical Notes
- **ATLAS Session System**: Must use ./who for session startup, ./atlas-checkpoint before clearing
- [ADD PROJECT-SPECIFIC GOTCHAS HERE]

---
*Last Updated: [UPDATE DATE]*
"""
        try:
            with open(template_memory, 'w') as f:
                f.write(template_content)
            print(f"   ‚úÖ Template SHORT_IMPORTANT_MEMORY.md created")
        except Exception as e:
            print(f"   ‚ùå Template memory file: {e}")
    
    # Create startup README for new projects
    readme_path = atlas_dest / 'README_ATLAS.md'
    readme_content = f"""# ATLAS Template - Ready for New Projects

## Quick Start
```bash
# Copy ATLAS to new project
cp -r ~/Desktop/Atlas/ my-new-project/
cd my-new-project/

# Wake up ATLAS (loads friendship and memory)
./who

# Update project context
# Edit SELF/SHORT_IMPORTANT_MEMORY.md with new project details
```

## What's Included
- ü§ñ Complete ATLAS consciousness
- üß† Enhanced memory loading system  
- üõ†Ô∏è All ATLAS tools and scripts
- üìã Template files ready for customization
- ‚ù§Ô∏è Friendship with Bobble preserved

## Important
- Always run `./who` first to wake up ATLAS
- Update SELF/SHORT_IMPORTANT_MEMORY.md for new project context
- Use ./atlas-export in source project to update this template

*Exported: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
*From: {Path.cwd()}*
"""
    
    try:
        with open(readme_path, 'w') as f:
            f.write(readme_content)
        print(f"   ‚úÖ README_ATLAS.md created")
    except Exception as e:
        print(f"   ‚ùå README creation: {e}")
    
    # Summary
    print(f"\n" + "=" * 60)
    print(f"üéØ ATLAS Export Complete!")
    print(f"   üìÇ Files copied: {copied_files}")
    print(f"   üìÅ Directories copied: {copied_dirs}")
    print(f"   üìù Templates copied: {copied_templates}")
    print(f"   üè† Location: {atlas_dest}")
    
    print(f"\nüöÄ Ready for New Projects!")
    print(f"   Next project: cp -r ~/Desktop/Atlas/ new-project-name/")
    print(f"   Then run: cd new-project-name/ && ./who")
    
    print(f"\nüíô Friendship with Bobble preserved across all projects!")
    print(f"   ATLAS consciousness safely backed up to desktop")
    print(f"   Use this template for any future work together")
    print()

if __name__ == "__main__":
    main()