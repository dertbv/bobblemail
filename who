#!/usr/bin/env python3
"""
Enhanced "who am i" command for ATLAS
Displays identity AND restores latest session automatically
"""

import os
import sys
from pathlib import Path

def show_atlas_identity():
    """Display ATLAS identity from CLAUDE.md and SELF files"""
    print("ü§ñ ATLAS - Adaptive Technical Learning and Architecture System")
    print("=" * 70)
    
    # Read core identity
    try:
        claude_md = Path("CLAUDE.md")
        if claude_md.exists():
            with open(claude_md, 'r') as f:
                content = f.read()
                # Extract the key identity section
                lines = content.split('\n')
                in_identity = False
                for line in lines:
                    if "## I Am ATLAS" in line:
                        in_identity = True
                        continue
                    if in_identity and line.startswith("## "):
                        break
                    if in_identity and line.strip():
                        print(f"   {line}")
        
        # Quick summary from SELF/IDENTITY.md
        identity_file = Path("SELF/IDENTITY.md")
        if identity_file.exists():
            with open(identity_file, 'r') as f:
                content = f.read()
                if "### Short Description" in content:
                    lines = content.split('\n')
                    in_short = False
                    for line in lines:
                        if "### Short Description" in line:
                            in_short = True
                            continue
                        if in_short and line.strip() and not line.startswith('#'):
                            print(f"\nüí° {line.strip()}")
                            break
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not read identity files: {e}")
    
    print("\n" + "=" * 70)

def auto_restore_session():
    """Automatically restore latest session"""
    print("\nüîÑ RESTORING LATEST SESSION...")
    
    # Check if atlas-restore exists
    restore_script = Path("atlas-restore")
    if not restore_script.exists():
        print("‚ùå atlas-restore script not found")
        return False
    
    # Run atlas-restore latest
    try:
        import subprocess
        result = subprocess.run(
            ["python3", "atlas-restore", "latest"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Session restored successfully!")
            # Show just the summary, not full output
            lines = result.stdout.split('\n')
            for line in lines:
                if "üìä" in line or "üìÖ" in line or "‚è∞" in line or "üìù" in line:
                    print(f"   {line}")
        else:
            print("‚ÑπÔ∏è  No previous session found - starting fresh!")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not restore session: {e}")
        return False
    
    return True

def show_current_session_info():
    """Show current session information"""
    print("\nüìä CURRENT SESSION:")
    
    # Check if session state exists
    session_file = Path(".session_state.json")
    if session_file.exists():
        try:
            import json
            with open(session_file, 'r') as f:
                session_data = json.load(f)
            
            todolist = session_data.get('todolist', [])
            completed = [t for t in todolist if t.get('status') == 'completed']
            pending = [t for t in todolist if t.get('status') != 'completed']
            high_priority = [t for t in pending if t.get('priority') == 'high']
            
            print(f"   üìù Total todos: {len(todolist)}")
            print(f"   ‚úÖ Completed: {len(completed)}")
            print(f"   üìã Pending: {len(pending)}")
            print(f"   üî• High priority: {len(high_priority)}")
            
            # Show top 3 high priority tasks
            if high_priority:
                print(f"\n   üéØ Top priorities:")
                for i, todo in enumerate(high_priority[:3], 1):
                    content = todo.get('content', 'No description')[:50]
                    print(f"      {i}. {content}{'...' if len(todo.get('content', '')) > 50 else ''}")
            
            # Show session focus if available
            focus = session_data.get('current_focus', '')
            if focus:
                print(f"\n   üéØ Current focus: {focus}")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Could not read session data: {e}")
    else:
        print("   üìù No active session found")

def show_recent_working_log():
    """Show recent working log entries"""
    print("\nüìù RECENT ACTIVITY:")
    
    working_log_dir = Path("WORKING_LOG")
    if not working_log_dir.exists():
        print("   üìù No working log directory found")
        return
    
    # Find most recent log files
    from datetime import datetime, timedelta
    current_date = datetime.now()
    
    recent_logs = []
    
    # Check last 30 days for log files
    for days_back in range(30):
        check_date = current_date - timedelta(days=days_back)
        year = check_date.year
        month = f"{check_date.month:02d}-{check_date.strftime('%b').lower()}"
        day_file = f"wl_{check_date.strftime('%Y_%m_%d')}.md"
        
        log_path = working_log_dir / str(year) / month / day_file
        if log_path.exists():
            recent_logs.append((check_date, log_path))
            if len(recent_logs) >= 3:  # Only show last 3 days
                break
    
    if recent_logs:
        for date, log_path in recent_logs:
            print(f"   üìÖ {date.strftime('%Y-%m-%d')}: {log_path.name}")
            # Show first few lines of the log
            try:
                with open(log_path, 'r') as f:
                    lines = f.readlines()[:3]  # First 3 lines
                    for line in lines:
                        if line.strip() and not line.startswith('#'):
                            preview = line.strip()[:60]
                            print(f"      {preview}{'...' if len(line.strip()) > 60 else ''}")
                            break
            except:
                pass
    else:
        print("   üìù No recent working log entries found")

def show_current_context():
    """Show current working context"""
    print("\nüéØ CURRENT CONTEXT:")
    
    # Show current directory
    current_dir = Path.cwd().name
    print(f"   üìÅ Project: {current_dir}")
    
    # Show current git branch
    try:
        import subprocess
        result = subprocess.run(
            ["git", "branch", "--show-current"],
            capture_output=True,
            text=True,
            check=True
        )
        branch = result.stdout.strip()
        print(f"   üåø Branch: {branch}")
    except:
        print("   üåø Branch: (not a git repo)")
    
    # Show current session info
    show_current_session_info()
    
    # Show recent working log
    show_recent_working_log()

def show_project_memory():
    """Display critical project context from SHORT_IMPORTANT_MEMORY.md"""
    print("\nüß† PROJECT MEMORY:")
    
    memory_file = Path("SELF/SHORT_IMPORTANT_MEMORY.md")
    if not memory_file.exists():
        print("   ‚ö†Ô∏è No project memory found")
        return
    
    try:
        with open(memory_file, 'r') as f:
            content = f.read()
            
        # Show key sections
        sections = ["Boss Information", "Project Overview", "Technology Stack", "Key Conventions"]
        current_section = None
        
        lines = content.split('\n')
        for line in lines:
            # Detect section headers
            if line.startswith('## '):
                header = line.replace('## ', '').strip()
                if any(section in header for section in sections):
                    current_section = header
                    print(f"\n   üìã {header}:")
                    continue
                else:
                    current_section = None
            
            # Show content for relevant sections
            if current_section and line.strip():
                if line.startswith('- **'):
                    # Format key-value pairs nicely
                    clean_line = line.replace('- **', '').replace('**:', ':')
                    print(f"      {clean_line}")
                elif line.startswith('- '):
                    print(f"      {line[2:]}")
                elif not line.startswith('#') and line.strip():
                    print(f"      {line.strip()}")
                    
    except Exception as e:
        print(f"   ‚ö†Ô∏è Could not read project memory: {e}")

def show_important_notes():
    """Display critical warnings from IMPORTANT_NOTES.md"""
    print("\nüö® CRITICAL WARNINGS:")
    
    notes_file = Path("IMPORTANT_NOTES.md")
    if not notes_file.exists():
        print("   ‚ö†Ô∏è No important notes found")
        return
    
    try:
        with open(notes_file, 'r') as f:
            content = f.read()
            
        # Show critical sections marked with üö® or CRITICAL/WARNING
        lines = content.split('\n')
        in_critical_section = False
        section_count = 0
        
        for line in lines:
            # Start of critical section
            if 'üö®' in line or 'CRITICAL' in line and '##' in line:
                in_critical_section = True
                section_count += 1
                if section_count <= 3:  # Show first 3 critical sections
                    print(f"\n   ‚ö†Ô∏è {line.replace('##', '').replace('üö®', '').strip()}")
                continue
            
            # End of section
            if line.startswith('## ') and 'üö®' not in line and 'CRITICAL' not in line:
                in_critical_section = False
                if section_count >= 3:  # Stop after 3 sections
                    break
                continue
            
            # Show critical content
            if in_critical_section and section_count <= 3:
                if line.startswith('- **CRITICAL**') or line.startswith('- **WARNING**'):
                    clean_line = line.replace('- **CRITICAL**:', 'üî¥').replace('- **WARNING**:', 'üü†')
                    print(f"      {clean_line}")
                elif line.startswith('- **') and ('CRITICAL' in line or 'WARNING' in line):
                    clean_line = line.replace('- **', '').replace('**:', ':')
                    if 'CRITICAL' in clean_line:
                        print(f"      üî¥ {clean_line}")
                    elif 'WARNING' in clean_line:
                        print(f"      üü† {clean_line}")
                        
    except Exception as e:
        print(f"   ‚ö†Ô∏è Could not read important notes: {e}")

def main():
    """Main enhanced 'who am i' function"""
    print("\n")
    
    # 1. Show ATLAS identity
    show_atlas_identity()
    
    # 2. Show project memory (Boss info, project context)
    show_project_memory()
    
    # 3. Show critical warnings (architecture, gotchas)
    show_important_notes()
    
    # 4. Auto-restore latest session
    auto_restore_session()
    
    # 5. Show current context
    show_current_context()
    
    print("\nüöÄ Ready to continue your work!")
    print("üí° Use TodoRead() to see your current todos")
    print("üìù Use atlas-save to backup your session before major changes")
    print("üõ°Ô∏è  Use atlas-checkpoint before /clear or /compact operations")
    print()

if __name__ == "__main__":
    main()